{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NO.2: irine\tMath: 67\tEnglish: 89\n",
      "NO.3: andy\tMath: 56\tEnglish: 78\n",
      "average score(math):           61.5\n",
      "average score(english):        83.5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#singly linked list \n",
    "\n",
    "class calsslinkedlist():\n",
    "    \n",
    "    class student():\n",
    "        def __init__(self,name,number,math,eng):\n",
    "            self.name = name\n",
    "            self.math = math\n",
    "            self.eng = eng\n",
    "            self.no = number\n",
    "            self.next = None\n",
    "\n",
    "        def __str__(self):\n",
    "            return \"NO.%d: %s\\tMath: %d\\tEnglish: %d\" % (self.no,self.name,self.math,self.eng)\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.head = None\n",
    "    \n",
    "    def append(self,name,number,math,eng):\n",
    "        current = self.head\n",
    "        new_one = student(name,number,math,eng)\n",
    "        if not self.head:\n",
    "            self.head = new_one\n",
    "        else:\n",
    "            while current.next:\n",
    "                current = current.next\n",
    "            current.next = new_one\n",
    "    \n",
    "    def prepend(self,name,number,math,eng):\n",
    "        current = self.head\n",
    "        new_one = student(name,number,math,eng)\n",
    "        if not self.head:\n",
    "            self.head = new_one\n",
    "        else:\n",
    "            new_one.next = current\n",
    "            self.head = new_one\n",
    "    \n",
    "    def remove(self,name):\n",
    "        current = self.head\n",
    "        prev = None\n",
    "        while current:\n",
    "            if current.name == name and current == self.head: #head removed\n",
    "                self.head = current.next\n",
    "            elif current.name == name:\n",
    "                if not current.next:\n",
    "                    prev.next = None\n",
    "                else:\n",
    "                    prev.next = current.next\n",
    "            prev = current\n",
    "            current = current.next\n",
    "            \n",
    "    def size(self):\n",
    "        current = self.head     #external reference 讀取游標\n",
    "        count = 0\n",
    "        while current != None:\n",
    "            count = count + 1\n",
    "            current = current.next\n",
    "        return count\n",
    "    \n",
    "    def printlist(self):\n",
    "        current = self.head\n",
    "        while current != None:\n",
    "            print(current)\n",
    "            current = current.next\n",
    "    \n",
    "    def average(self):\n",
    "        current = self.head\n",
    "        msum, esum, totalnum = 0, 0, 0\n",
    "        while current != None:\n",
    "            msum += current.math\n",
    "            esum += current.eng\n",
    "            totalnum += 1 \n",
    "            current = current.next\n",
    "        \n",
    "        try:\n",
    "            averitem = {'average score(math):':msum/totalnum,'average score(english):':esum/totalnum}\n",
    "            for k,v in averitem.items():\n",
    "                print(k.ljust(25)+str(v).rjust(10))\n",
    "        except ZeroDivisionError:\n",
    "            print('no person')  \n",
    "\n",
    "    def reverse(self):         #how impressive!\n",
    "        current = self.head\n",
    "        prev = None\n",
    "        while current != None: \n",
    "            temp =  current.next\n",
    "            current.next = prev\n",
    "            prev = current \n",
    "            current = temp\n",
    "        self.head = prev     \n",
    "\n",
    "list = calsslinkedlist()\n",
    "list.append('viola',1,99,100)\n",
    "list.append('irine',2,67,89)\n",
    "list.append('andy',3,56,78)\n",
    "list.remove('viola')\n",
    "list.printlist()\n",
    "list.average()\n",
    "list.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1)add info or (2)leave\n",
      "1\n",
      "enter name,number,math,english in order\n",
      "name: viola\n",
      "number: 1\n",
      "math: 99\n",
      "eng: 100\n",
      "(1)add info or (2)leave\n",
      "1\n",
      "enter name,number,math,english in order\n",
      "name: irene\n",
      "number: 2\n",
      "math: 45\n",
      "eng: 78\n",
      "(1)add info or (2)leave\n",
      "2\n",
      "NO.1: viola\tMath: 99\tEnglish: 100\n",
      "NO.2: irene\tMath: 45\tEnglish: 78\n",
      "average score(english):        89.0\n",
      "average score(math):           72.0\n"
     ]
    }
   ],
   "source": [
    "#run the transcript automatcally interactive mode\n",
    "def main():\n",
    "    list = calsslinkedlist()\n",
    "    while True:\n",
    "        print('(1)add info or (2)leave')\n",
    "        try:\n",
    "            choose = int(input())\n",
    "            if choose == 2:\n",
    "                list.reverse()\n",
    "                list.printlist()\n",
    "                list.average()\n",
    "                break\n",
    "            elif choose == 1:\n",
    "                print('enter name,number,math,english in order')\n",
    "                list.add(name=input('name: '),number=int(input('number: ')),\n",
    "                         math=int(input('math: ')),eng=int(input('eng: ')))\n",
    "        except ValueError:\n",
    "            print('invalid. please type again\\n')\n",
    "\n",
    "if __name__== \"__main__\":\n",
    "    main()         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1)add info or (2)leave\n",
      "1\n",
      "enter name,number,math,english in order\n",
      "name: viola\n",
      "number: 1\n",
      "math: 34\n",
      "eng: 56\n",
      "(1)add info or (2)leave\n",
      "1\n",
      "enter name,number,math,english in order\n",
      "name: irene\n",
      "number: 2\n",
      "math: 33\n",
      "eng: 55\n",
      "(1)add info or (2)leave\n",
      "2\n",
      "NO.1: viola\tMath: 34\tEnglish: 56\n",
      "NO.2: irene\tMath: 33\tEnglish: 55\n",
      "average score(math):           33.5\n",
      "average score(english):        55.5\n"
     ]
    }
   ],
   "source": [
    "#this is a function which can handle the singly linked list\n",
    "def runtranscript(list):\n",
    "    \n",
    "    while True:\n",
    "        print('(1)add info or (2)leave')\n",
    "        try:\n",
    "            choose = int(input())\n",
    "            if choose == 2:\n",
    "                list.reverse()\n",
    "                list.printlist()\n",
    "                list.average()\n",
    "                break\n",
    "            elif choose == 1:\n",
    "                print('enter name,number,math,english in order')\n",
    "                list.add(name=input('name: '),number=int(input('number: ')),\n",
    "                         math=int(input('math: ')),eng=int(input('eng: ')))\n",
    "        except ValueError:\n",
    "            print('invalid. please type again\\n')\n",
    "\n",
    "list = calsslinkedlist() #empty list\n",
    "\n",
    "runtranscript(list)           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NO.3: andy\tMath: 56\tEnglish: 78\n",
      "NO.4: dan\tMath: 78\tEnglish: 89\n",
      "NO.1: viola\tMath: 100\tEnglish: 100\n",
      "NO.2: irene\tMath: 87\tEnglish: 78\n"
     ]
    }
   ],
   "source": [
    "#function that concatenate 2 singly linked lists\n",
    "\n",
    "def linktwolist(list1,list2):\n",
    "    if type(list1) != type(list2):\n",
    "        raise TypeError(\"concatenation undefined for different data type\")\n",
    "    \n",
    "    head1 = list1.head                            #object student()\n",
    "    head2 = list2.head                            #object student()\n",
    "    result = calsslinkedlist()\n",
    "    \n",
    "    while head1 != None:\n",
    "        result.add(head1.name,head1.no,head1.math,head1.eng)\n",
    "        head1 = head1.next\n",
    "        \n",
    "    head1 = head2\n",
    "    while head1 != None:\n",
    "        result.add(head1.name,head1.no,head1.math,head1.eng)\n",
    "        head1 = head1.next\n",
    "    \n",
    "    return result     \n",
    "\n",
    "list1 = calsslinkedlist()\n",
    "list1.add('viola',1,100,100)\n",
    "list1.add('irene',2,87,78)\n",
    "list2 = calsslinkedlist()\n",
    "list2.add('andy',3,56,78)\n",
    "list2.add('dan',4,78,89)\n",
    "\n",
    "#a = linktwolist(list1,list2)\n",
    "linktwolist(list1,list2).printlist()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NO.1: viola\tMath: 99\tEnglish: 78\n",
      "NO.2: irine\tMath: 56\tEnglish: 78\n",
      "NO.3: grass\tMath: 66\tEnglish: 88\n",
      "NO.4: andy\tMath: 78\tEnglish: 87\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#circular linked list \n",
    "\n",
    "class student():\n",
    "    def __init__(self,name,number,math,eng):\n",
    "        self.name = name\n",
    "        self.math = math\n",
    "        self.eng = eng\n",
    "        self.no = number\n",
    "        self.next = None\n",
    "\n",
    "    def __str__(self):\n",
    "        return \"NO.%d: %s\\tMath: %d\\tEnglish: %d\" % (self.no,self.name,self.math,self.eng)    \n",
    "\n",
    "class CircularList():\n",
    "    def __init__(self):\n",
    "        self.head = None\n",
    "        \n",
    "    def append(self,name,number,math,eng):            #add item to the last\n",
    "        if not self.head:\n",
    "            self.head = student(name,number,math,eng)\n",
    "            self.head.next = self.head\n",
    "        else:\n",
    "            new_one = student(name,number,math,eng)\n",
    "            current = self.head\n",
    "            \n",
    "            while current.next != self.head:\n",
    "                current = current.next\n",
    "            current.next = new_one\n",
    "            new_one.next = self.head\n",
    "            \n",
    "    def prepend(self,name,number,math,eng):          #add item to the front\n",
    "        new_one = student(name,number,math,eng)\n",
    "        new_one.next = self.head\n",
    "        current = self.head\n",
    "        \n",
    "        if not self.head:                            #when self.head is None, no element in the list\n",
    "            new_one.next = new_one\n",
    "        else:\n",
    "            while current.next != self.head:\n",
    "                current = current.next\n",
    "            current.next = new_one\n",
    "        self.head = new_one    \n",
    "    \n",
    "    def size(self):\n",
    "        current = self.head\n",
    "        count = 1\n",
    "        while current.next != self.head:\n",
    "            current = current.next\n",
    "            count += 1\n",
    "        return count  \n",
    "    \n",
    "    def printlist(self):\n",
    "        current = self.head\n",
    "        while current:\n",
    "            print(current)\n",
    "            current = current.next\n",
    "            if current == self.head:\n",
    "                break\n",
    "                \n",
    "    def remove(self,name):\n",
    "        current = self.head \n",
    "        prev = None\n",
    "        if self.head.name == name:              #removed item is at the first node(self.head)\n",
    "            while current.next != self.head:\n",
    "                current = current.next\n",
    "            current.next = self.head.next\n",
    "            self.head = current.next\n",
    "        else: \n",
    "            while current.name != name:\n",
    "                prev = current\n",
    "                current = current.next\n",
    "            prev.next = current.next     \n",
    "                        \n",
    "                \n",
    "list1 = CircularList()     \n",
    "list1.append('viola',1,99,78)\n",
    "list1.append('irine',2,56,78)\n",
    "list1.append('grass',3,66,88)\n",
    "list1.append('andy',4,78,87)\n",
    "list1.append('rechard',5,98,77)\n",
    "list1.remove('rechard')\n",
    "#list1.remove('viola')\n",
    "list1.printlist()\n",
    "list1.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NO.1: viola\tMath: 88\tEnglish: 100\n",
      "NO.2: irene\tMath: 67\tEnglish: 89\n",
      "NO.3: andy\tMath: 45\tEnglish: 67\n",
      "NO.4: lina\tMath: 78\tEnglish: 89\n",
      "NO.5: vic\tMath: 77\tEnglish: 89\n"
     ]
    }
   ],
   "source": [
    "#singly doubly linked lists \n",
    "\n",
    "class student():\n",
    "    def __init__(self,name,number,math,eng):\n",
    "        self.name = name\n",
    "        self.math = math\n",
    "        self.eng = eng\n",
    "        self.no = number\n",
    "        self.next = None\n",
    "        self.prev = None\n",
    "        \n",
    "    def __str__(self):\n",
    "        return \"NO.%s: %s\\tMath: %d\\tEnglish: %d\" % (self.no,self.name,self.math,self.eng) \n",
    "    \n",
    "class DoublyLinkedList():\n",
    "    def __init__(self):\n",
    "        self.head = None\n",
    "        \n",
    "    def append(self,name,number,math,eng):\n",
    "        new_one = student(name,number,math,eng)\n",
    "        current = self.head\n",
    "        \n",
    "        if not self.head:                               # no element in the list\n",
    "            self.head = new_one   #its pointer next and previous are already point to None\n",
    "        else:\n",
    "            while current.next:\n",
    "                current = current.next\n",
    "            current.next = new_one  \n",
    "            new_one.next = None\n",
    "            new_one.prev = current\n",
    "            \n",
    "    def prepend(self,name,number,math,eng):\n",
    "        new_one = student(name,number,math,eng)\n",
    "        current = self.head\n",
    "        \n",
    "        if not self.head:\n",
    "            self.head = new_one\n",
    "        else:\n",
    "            current.prev = new_one    \n",
    "            new_one.next = current\n",
    "            self.head = new_one\n",
    "     \n",
    "    def addafter_node(self,afternode,name,number,math,eng):\n",
    "        current = self.head\n",
    "        while current:\n",
    "            if current.next == None and current.name == afternode:\n",
    "                self.append(name,number,math,eng)\n",
    "                return\n",
    "            elif current.next == None and current.name != afternode:\n",
    "                print('\\nThe person after whom you wanna add isn\\'t in the list\\n')\n",
    "                return \n",
    "            elif current.name == afternode:\n",
    "                new_one = student(name,number,math,eng) \n",
    "                new_one.next = current.next\n",
    "                current.next.prev = new_one\n",
    "                new_one.prev = current\n",
    "                current.next = new_one\n",
    "                return\n",
    "            current = current.next        \n",
    "            \n",
    "    def addbefore_node(self,beforenode,name,number,math,eng):\n",
    "        current = self.head \n",
    "        while current:\n",
    "            if current.prev == None and current.name == beforenode:\n",
    "                self.prepend(name,number,math,eng)\n",
    "                return\n",
    "            elif current.next == None and current.name != beforenode:         #name is not in the list\n",
    "                print('\\nThe person before whom you wanna add isn\\'t in the list\\n')\n",
    "                return \n",
    "            elif current.name == beforenode:\n",
    "                new_one = student(name,number,math,eng) \n",
    "                new_one.next = current\n",
    "                new_one.prev = current.prev\n",
    "                current.prev.next = new_one\n",
    "                current.prev = new_one\n",
    "                return\n",
    "            current = current.next   \n",
    "            \n",
    "    def remove(self,name):       \n",
    "        current = self.head       \n",
    "        while current:\n",
    "            #case1&2: both are heads\n",
    "            if current.name == name and current == self.head:\n",
    "                #case1: only one element in list\n",
    "                if not current.next:       #current.next == None\n",
    "                    current = None\n",
    "                    self.head = None\n",
    "                    print('empty')\n",
    "                    return\n",
    "                #case2: 2 element in list at least\n",
    "                else: \n",
    "                    current.next.prev = None\n",
    "                    self.head = current.next\n",
    "                    current = None\n",
    "                    return\n",
    "            #case3$4: \n",
    "            elif current.name == name:\n",
    "                #case3: among the elements\n",
    "                if current.next:\n",
    "                    current.next.prev = current.prev\n",
    "                    current.prev.next = current.next\n",
    "                    return\n",
    "                #case4: the last one\n",
    "                else:\n",
    "                    current.prev.next = None\n",
    "            current = current.next \n",
    "        \n",
    "    def reverse(self):\n",
    "        current = self.head\n",
    "        temp = None\n",
    "        while current:\n",
    "            temp = current.prev\n",
    "            current.prev = current.next\n",
    "            current.next = temp\n",
    "            self.head = current\n",
    "            current = current.prev    \n",
    "        \n",
    "    def printlist(self):\n",
    "        current = self.head\n",
    "        while current:\n",
    "            print(current)\n",
    "            current = current.next\n",
    "            \n",
    "#-----------------------------------------------        \n",
    "dlist = DoublyLinkedList()\n",
    "dlist.append('viola',1,88,100)\n",
    "dlist.append('irene',2,67,89)\n",
    "dlist.append('andy',3,45,67)\n",
    "dlist.append('lina',4,78,89)\n",
    "dlist.append('vic',5,77,89)\n",
    "\n",
    "#dlist.addbefore_node('irene','fuck',2,44,55)\n",
    "#dlist.addbefore_node('vic','fuckk',2,44,55)\n",
    "#dlist.addbefore_node('vioa','fkkk',2,44,55)\n",
    "#dlist.remove('viola')\n",
    "#dlist.remove('vic')\n",
    "#dlist.reverse()\n",
    "dlist.printlist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
